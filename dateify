#!/usr/bin/env python3
# python>=3.6
import argparse, time, re
from pathlib import Path

def get_creation_date(p:Path) -> float:
    return p.stat().st_birthtime

def format_date_prefix(t:float) -> str:
    return time.strftime('%Y%m%dT%H%M%S--', time.localtime(t))

RE_PATTERN = re.compile(r'^[0-9]{8}T[0-9]{6}--')

def dateify(p:Path):
    if RE_PATTERN.match(str(p)):
        print(f'File already in dateify format: {p}')
        return
    old_name = p.name
    new_name = format_date_prefix( get_creation_date(p) ) + old_name
    new_path = p.with_name(new_name)
    p.rename(new_path)
    print(f'Renamed {old_name} to {new_name}')

def undateify(p:Path):
    m = RE_PATTERN.match(str(p))
    if not m:
        print(f'Not in dateify format: {p}')
        return
    old_name = p.name
    new_name = m.string[m.end():]
    new_path = p.with_name(new_name)
    p.rename(new_path)
    print(f'Renamed {old_name} to {new_name}')

def main():
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
    parser.description = 'Rename file by adding/removing a date-time prefix in the format yyyymmddThhmmss--'
    parser.add_argument('-u', '--undo', action='store_true', help='Undo the renaming, removing the date-time prefix')
    parser.add_argument('file', nargs='+', default=None, help='File or files to rename')
    parser.epilog = (f'Example:\n'
                     f'\t{parser.prog} file1.txt # Add date-time prefix\n'
                     f'\t{parser.prog} --undo 20240616T193200--file1.txt # Remove date-time prefix\n'
                     "\n"
                     "The date-time moment is based on the file's creation time\n")
    args = parser.parse_args()
    action = dateify if not args.undo else undateify

    for p in (Path(f) for f in args.file if Path(f).exists()):
        action(p)
    exit(0)

if __name__ == '__main__':
    main()
    

